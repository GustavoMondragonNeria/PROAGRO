//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiciosWebDatos.Modelo
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PROAGROEntities : DbContext
    {
        public PROAGROEntities()
            : base("name=PROAGROEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Estados> Estados { get; set; }
        public virtual DbSet<Georreferencias> Georreferencias { get; set; }
        public virtual DbSet<Usuarios> Usuarios { get; set; }
        public virtual DbSet<Permisos> Permisos { get; set; }
    
        public virtual ObjectResult<spListaGeorreferencias_Result> spListaGeorreferencias()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spListaGeorreferencias_Result>("spListaGeorreferencias");
        }
    
        public virtual ObjectResult<spUbicacionesGeorreferenciasPorUsuario_Result> spUbicacionesGeorreferenciasPorUsuario(Nullable<int> usuario)
        {
            var usuarioParameter = usuario.HasValue ?
                new ObjectParameter("usuario", usuario) :
                new ObjectParameter("usuario", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spUbicacionesGeorreferenciasPorUsuario_Result>("spUbicacionesGeorreferenciasPorUsuario", usuarioParameter);
        }
    
        public virtual ObjectResult<spListaEstados_Result> spListaEstados()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spListaEstados_Result>("spListaEstados");
        }
    
        public virtual int spAgregarUsuario(string contraseña, string nombre, Nullable<System.DateTime> fecha_Nacimiento, string rFC, Nullable<bool> aCTIVO)
        {
            var contraseñaParameter = contraseña != null ?
                new ObjectParameter("Contraseña", contraseña) :
                new ObjectParameter("Contraseña", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var fecha_NacimientoParameter = fecha_Nacimiento.HasValue ?
                new ObjectParameter("Fecha_Nacimiento", fecha_Nacimiento) :
                new ObjectParameter("Fecha_Nacimiento", typeof(System.DateTime));
    
            var rFCParameter = rFC != null ?
                new ObjectParameter("RFC", rFC) :
                new ObjectParameter("RFC", typeof(string));
    
            var aCTIVOParameter = aCTIVO.HasValue ?
                new ObjectParameter("ACTIVO", aCTIVO) :
                new ObjectParameter("ACTIVO", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAgregarUsuario", contraseñaParameter, nombreParameter, fecha_NacimientoParameter, rFCParameter, aCTIVOParameter);
        }
    
        public virtual int spAgregarPermiso(Nullable<int> idUsuario, Nullable<int> idEstado, Nullable<System.DateTime> fecha)
        {
            var idUsuarioParameter = idUsuario.HasValue ?
                new ObjectParameter("idUsuario", idUsuario) :
                new ObjectParameter("idUsuario", typeof(int));
    
            var idEstadoParameter = idEstado.HasValue ?
                new ObjectParameter("idEstado", idEstado) :
                new ObjectParameter("idEstado", typeof(int));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAgregarPermiso", idUsuarioParameter, idEstadoParameter, fechaParameter);
        }
    
        public virtual ObjectResult<spListaUsuarios_Result> spListaUsuarios()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spListaUsuarios_Result>("spListaUsuarios");
        }
    }
}
